import {Match} from "../src/match";
import {Annotation} from "../src/annotation";
import {MatchState} from "../src";

describe("Match tests", () => {

    test("Moves", () => {
        const match = new Match();
        match.makeMoves(['e4', 'a6', 'e5', 'd5', 'exd6', 'cxd6', 'Bc4', 'Qc7', 'Qh5', 'Nf6', 'Qxf7+', 'Kd8', 'Nf3', 'Nbd7', 'O-O', 'Nb6', 'Ng5', 'Bg4', 'Ne6+', 'Kc8', 'Nc3', 'h5', 'h3', 'Ne8', 'Qxe8+', 'Qd8', 'Qxd8#']);
        expect(match.getFEN()).toEqual('r1kQ1b1r/1p2p1p1/pn1pN3/7p/2B3b1/2N4P/PPPP1PP1/R1B2RK1 b - - 0 14');
        match.startNew();
        match.makeMove('e4');
        match.makeMove('Nc6');
        match.makeMove('e5');
        match.makeMove('f5');
        match.makeMove('exf6');
        expect(match.getFEN()).toEqual('r1bqkbnr/ppppp1pp/2n2P2/8/8/8/PPPP1PPP/RNBQKBNR b KQkq - 0 3');
        match.unmakeMove();
        match.unmakeMove();
        match.makeMove('e6');
        expect(match.getFEN()).toEqual('r1bqkbnr/pppp1ppp/2n1p3/4P3/8/8/PPPP1PPP/RNBQKBNR w KQkq - 0 3');
        match.makeMove('d4');
        expect(match.getMove().getSAN()).toEqual('d4');
        expect(match.getMove(0).getSAN()).toEqual('e4');
        expect(match.getMove(3).getSAN()).toEqual('e6');
    });

    test("PGN", () => {

        const getPGNMoveList = (pgn: string) => {
            let pgnParts = pgn.split('\n\n');
            return pgnParts[1];
        };

        const match = new Match();
        match.makeMove('e4');
        match.makeMove('e5');
        match.makeMove('Bc4');
        match.makeMove('Nc6');
        match.makeMove('Qh5');
        match.addComments('Intento de mate pastor');
        match.makeMove('g6');
        match.makeMove('Qf3');
        match.makeMove('d6');
        match.addComments('APA !! aca me deje mate en 1');
        match.makeMove('Nc3');
        match.goToPosition(2);
        match.makeMove('Nf3');
        match.makeMove('Bb4');
        match.addComments('Estoy en una variante');
        match.makeMove('a3');
        match.unmakeMove();
        match.makeMove('c3');
        expect(getPGNMoveList(match.getPGN())).toEqual('1.e4 e5 2.Bc4 (2.Nf3 Bb4 {Estoy en una variante} 3.c3) 2...Nc6 3.Qh5 {Intento de mate pastor} 3...g6 4.Qf3 d6 {APA !! aca me deje mate en 1} 5.Nc3 *');
        match.makeMove('Ba5');
        match.goToCurrentPosition();
        match.unmakeMove();
        match.unmakeMove();
        expect(getPGNMoveList(match.getPGN())).toEqual('1.e4 e5 2.Bc4 (2.Nf3 Bb4 {Estoy en una variante} 3.c3 Ba5) 2...Nc6 3.Qh5 {Intento de mate pastor} 3...g6 4.Qf3 *');
        match.makeMove('Qf6');
        match.addAnnotation(Annotation.GOOD_MOVE);
        match.makeMove('Qxf6');
        match.makeMove('Nxf6');
        expect(getPGNMoveList(match.getPGN())).toEqual('1.e4 e5 2.Bc4 (2.Nf3 Bb4 {Estoy en una variante} 3.c3 Ba5) 2...Nc6 3.Qh5 {Intento de mate pastor} 3...g6 4.Qf3 Qf6 $1 5.Qxf6 Nxf6 *');
        match.goToPreviousPosition();
        match.goToPreviousPosition();
        match.goToPreviousPosition();
        match.goToPreviousPosition();
        match.addAnnotation(Annotation.POOR_MOVE);
        match.goToPreviousPosition();
        match.goToPreviousPosition();
        match.goToNextPosition();
        match.makeMove('Qf6');
        match.makeMove('d4');
        match.makeMove('exd4');
        match.makeMove('Bg5');
        expect(getPGNMoveList(match.getPGN())).toEqual('1.e4 e5 2.Bc4 (2.Nf3 Bb4 {Estoy en una variante} 3.c3 Ba5) 2...Nc6 3.Qh5 {Intento de mate pastor} 3...g6 $2 (3...Qf6 4.d4 exd4 5.Bg5) 4.Qf3 Qf6 $1 5.Qxf6 Nxf6 *');
        const pgn = match.getPGN();
        match.setPGN(pgn);
        expect(match.getPGN()).toEqual(pgn);
        match.setPGN('[Event "Chessboard Editor at Apronus.com"]\n[Date "2021.02.14"]\n[Round "-"]\n[White "?"]\n[Black "?"]\n[Result "*"]\n[SetUp "1"]\n[FEN "rnbqk2r/ppp1nppp/3p4/b3p3/2B1P3/2P2N2/PP1P1PPP/RNBQ1RK1 w kq - 0 1"]\n\n1. d4 exd4 2. cxd4 O-O *');
        expect(getPGNMoveList(match.getPGN())).toEqual('1.d4 exd4 2.cxd4 O-O *');
        match.setPGN('1.e3 e5 2.Nc3');
        expect(getPGNMoveList(match.getPGN())).toEqual('1.e3 e5 2.Nc3 *');
    });

    test("Node Movement", () => {
        const match = new Match();
        const startingFen = match.getFEN();
        match.makeMove('e4');
        match.makeMove('Nc6');
        const positionFen = match.getFEN();
        const positionId = match.getPositionId();
        match.makeMove('e5');
        const fen1 = match.getFEN();
        match.makeMove('f5');
        const fen2 = match.getFEN();
        match.makeMove('exf6');
        const currentFen = match.getFEN();
        match.goToPreviousPosition();
        match.goToPreviousPosition();
        expect(match.getFEN()).toEqual(fen1);
        match.goToNextPosition();
        expect(match.getFEN()).toEqual(fen2);
        match.goToCurrentPosition();
        expect(match.getFEN()).toEqual(currentFen);
        match.goToPositionId(positionId);
        match.makeMoves(['Nxf6', 'd4', 'd5', 'Bb5'], true);
        match.unmakeMove(true);
        match.makeMove('h3', true);
        expect(match.getFEN()).toEqual(positionFen);
        match.goToCurrentPosition();
        const lastFen = match.getFEN();
        match.goToStartPosition();
        expect(match.getFEN()).toEqual(startingFen);
        match.goToCurrentPosition();
        expect(match.getFEN()).toEqual(lastFen);
    });

    test("States", () => {
        const match = new Match();
        expect(match.getState()).toEqual(MatchState.ONGOING);
        match.makeMoves(['e3', 'g5', 'Nc3', 'f6', 'Qh5#']);
        expect(match.getState()).toEqual(MatchState.WHITE_WINS);
        match.startNew();
        match.makeMoves(['f3', 'e6', 'g4', 'Qh4#']);
        expect(match.getState()).toEqual(MatchState.BLACK_WINS);
        match.startNew('1k6/3R4/4P3/8/3b2r1/8/5r2/7K w - - 0 1');
        expect(match.getState()).toEqual(MatchState.ONGOING);
        match.makeMove('e7');
        match.makeMoves(['Rh4+', 'Kg1', 'Rg4+', 'Kh1', 'Rh4+', 'Kg1', 'Rg4+', 'Kh1']);
        expect(match.getState()).toEqual(MatchState.DRAW);
        match.startNew('K7/5R2/8/8/6k1/6q1/8/8 w - - 0 1');
        expect(match.getState()).toEqual(MatchState.ONGOING);
        match.makeMove('Rc7');
        match.makeMove('Qxc7');
        expect(match.getState()).toEqual(MatchState.DRAW);
        match.startNew('4k3/8/8/8/2BB1K2/8/8/8 b - - 46 4');
        expect(match.makeMove('Ke7')).toEqual(true);
        expect(match.makeMove('Kf5')).toEqual(true);
        expect(match.makeMove('Kf8')).toEqual(true);
        expect(match.makeMove('Bc5+')).toEqual(true);
        expect(match.getState()).toEqual(MatchState.DRAW);
        match.startNew('8/2KP4/8/6k1/8/8/3r4/7n w - - 0 1');
        expect(match.getState()).toEqual(MatchState.ONGOING);
        expect(match.makeMove('d8=Q+')).toEqual(true);
        expect(match.makeMove('Rxd8')).toEqual(true);
        expect(match.makeMove('Kxd8')).toEqual(true);
        expect(match.getState()).toEqual(MatchState.DRAW);
    });
});
